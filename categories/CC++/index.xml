<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CC++ on AuTopTr</title><link>https://autoptr.top/categories/CC++/</link><description>Recent content in CC++ on AuTopTr</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 31 Aug 2025 01:23:45 +0800</lastBuildDate><atom:link href="https://autoptr.top/categories/CC++/index.xml" rel="self" type="application/rss+xml"/><item><title>使用 MSVC 2019 Build Tools 构建 ONNX Runtime v1.22.2</title><link>https://autoptr.top/cpp/Build-ONNX-Runtime-v1.22.2-with-EWDK-and-MSVC2019-Build-Tools/</link><pubDate>Sun, 31 Aug 2025 01:23:45 +0800</pubDate><guid>https://autoptr.top/cpp/Build-ONNX-Runtime-v1.22.2-with-EWDK-and-MSVC2019-Build-Tools/</guid><description>[ONNX Runtime,MSVC2019,cmake,msvc2019,Windows]&lt;br />Windows 如何从源码安装 ONNX Runtime v1.22.2</description></item><item><title>Windows 源码安装 PaddleOCR-2.9.1</title><link>https://autoptr.top/cpp/Build-PaddleOCR-with-MSVC2019-Build-Tools/</link><pubDate>Wed, 29 Jan 2025 01:23:45 +0800</pubDate><guid>https://autoptr.top/cpp/Build-PaddleOCR-with-MSVC2019-Build-Tools/</guid><description>[PaddleOCR,MSVC2019,cmake,Windows]&lt;br />Windows 如何从源码安装 PaddleOCR-2.9.1</description></item><item><title>Windows 源码安装 OpenBLAS-0.3.29</title><link>https://autoptr.top/cpp/Build-OpenBLAS-with-MSVC2019-Build-Tools/</link><pubDate>Sun, 26 Jan 2025 01:23:45 +0800</pubDate><guid>https://autoptr.top/cpp/Build-OpenBLAS-with-MSVC2019-Build-Tools/</guid><description>[OpenBLAS,MSVC2019,cmake,Windows]&lt;br />Windows 如何从源码安装 OpenBLAS-0.3.29</description></item><item><title>MacOS Ventura 编译 protobuf-3.21.12</title><link>https://autoptr.top/cpp/Build-protobuf-lite-on-macOS-Ventura/</link><pubDate>Mon, 20 Jan 2025 01:23:45 +0800</pubDate><guid>https://autoptr.top/cpp/Build-protobuf-lite-on-macOS-Ventura/</guid><description>[protobuf,Notes,macOS,Darwin]&lt;br />MacOS Ventura 交叉编译 protobuf-3.21.12</description></item><item><title>Linux 中最简编译 Qt / QtCreator 配置参数</title><link>https://autoptr.top/cpp/Qt-and-QtCreator-Configure-Parameters/</link><pubDate>Tue, 22 Nov 2022 19:12:27 +0800</pubDate><guid>https://autoptr.top/cpp/Qt-and-QtCreator-Configure-Parameters/</guid><description>[Qt,Qt Creator,Configure,Linux,构建]&lt;br />Linux 中构建 Qt / QtCreator 的配置参数</description></item><item><title>懒加载提升 GoldenDict 查询速度</title><link>https://autoptr.top/gdocr/Lazy-Loading-performance-difference/</link><pubDate>Fri, 06 May 2022 06:32:29 +0800</pubDate><guid>https://autoptr.top/gdocr/Lazy-Loading-performance-difference/</guid><description>[GoldenDict Professional,专业版,箐典,懒加载,performance]&lt;br />箐典,适用 Web 内容的懒加载以提升 GoldenDict 专业版查询性能</description></item><item><title>关于 GoldenDict JavaScript 提权漏洞</title><link>https://autoptr.top/gdocr/GoldenDict-JavaScript-Privilge-Escalation/</link><pubDate>Tue, 16 Nov 2021 06:12:32 +0800</pubDate><guid>https://autoptr.top/gdocr/GoldenDict-JavaScript-Privilge-Escalation/</guid><description>[GoldenDict Professional,WebKit,JavaScript,Privilge Escalation,GoldenDict脚本提权漏洞]&lt;br />关于GoldenDict的JS提权漏洞的一点思考,Thinking on JavaScript Privilge Escalation of GoldenDict</description></item><item><title>关于 GoldenDict 查询性能提升的一点思考</title><link>https://autoptr.top/gdocr/mutex-performance-difference/</link><pubDate>Sun, 06 Jun 2021 19:32:29 +0800</pubDate><guid>https://autoptr.top/gdocr/mutex-performance-difference/</guid><description>[GoldenDict Professional,专业版,箐典,C++11,recursive_mutex,mutex,performance,C++,C,mac]&lt;br />箐典,关于GoldenDict++专业版查询性能提升的一点思考,std::recursive_mutex 和 std::mutex 性能差异</description></item><item><title>GoldenDict++插件接口定义</title><link>https://autoptr.top/gdocr/cn/GoldenDict-OCR-Plugins-Interface/</link><pubDate>Sat, 06 Jun 2020 01:20:30 +0800</pubDate><guid>https://autoptr.top/gdocr/cn/GoldenDict-OCR-Plugins-Interface/</guid><description>[GoldenDict,OCR,划词翻译,音频,开发,插件]&lt;br />使用GoldenDict++划词翻译的插件接口开发音频播放、划词（划屏和OCR）接口</description></item><item><title>Qt without Xcode · 不安装Xcode开发Qt应用</title><link>https://autoptr.top/cpp/Qt-without-Xcode/</link><pubDate>Sun, 19 Apr 2020 23:20:53 +0800</pubDate><guid>https://autoptr.top/cpp/Qt-without-Xcode/</guid><description>[Xcode,Qt,Qt Creator,Command,C++,C]&lt;br />Qt without Xcode,如何在不使用Xcode的前提下在macOS中使用Qt Creator开发Qt应用程序</description></item><item><title>Tutorials - All credit to github.com/NSHipster</title><link>https://autoptr.top/tutorials/NSHipster/</link><pubDate>Mon, 03 Jun 2019 08:08:08 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/</guid><description>[Tutorials,教程]&lt;br />Tutorials,教程</description></item><item><title>Language Server Protocol</title><link>https://autoptr.top/tutorials/NSHipster/2018-11-05-language-server-protocol/</link><pubDate>Mon, 05 Nov 2018 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2018-11-05-language-server-protocol/</guid><description>决定支持 LSP 可能是苹果自 2014 年将 Swift 作为开源软件发布以来，为 Swift 做出的最重要的决定。这对于 APP 开发者来说是一件大事，对于其他平台上的 Swift 开发者来说更是一件大事。&lt;br />[Language Server Protocol,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Language Server Protocol,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>numericCast(_:)</title><link>https://autoptr.top/tutorials/NSHipster/2018-10-15-numericcast/</link><pubDate>Mon, 15 Oct 2018 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2018-10-15-numericcast/</guid><description>编译通过的代码和正确的代码是不一样的。但有时候需要通过前者来最终获得后者。
&lt;br />[numericCast(_:),macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />numericCast(_:),macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>iOS 12</title><link>https://autoptr.top/tutorials/NSHipster/2018-09-17-ios-12/</link><pubDate>Mon, 17 Sep 2018 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2018-09-17-ios-12/</guid><description>在 NSHipster， 我们感兴趣的是那些最详细最细微的变化（也可以说, _晦涩的_?） 但是这些细微的东西最终加起来 却又能给我们每天的工作带来很大影响的变化 为了庆祝 iOS 12 在这周的发布, 我们通过一行行的 API diff 给大家分享一些遗珠。
&lt;br />[iOS 12,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />iOS 12,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>CMMotionActivity</title><link>https://autoptr.top/tutorials/NSHipster/2018-09-10-cmmotionactivity/</link><pubDate>Mon, 10 Sep 2018 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2018-09-10-cmmotionactivity/</guid><description>如今的 iPhone 都有着一整套传感器，包括相机、气压计、陀螺仪、磁强计和加速规。和人类一样，它们使用不同感觉信息的组合来确定其位置和朝向，通常和我们自身的生物力学过程非常相似。
&lt;br />[CMMotionActivity,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />CMMotionActivity,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Swift Property Observers</title><link>https://autoptr.top/tutorials/NSHipster/2018-08-20-swift-property-observers/</link><pubDate>Mon, 20 Aug 2018 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2018-08-20-swift-property-observers/</guid><description>现代软件开发已经被视为可能成为鲁布·戈德堡机械装置的典范。然而在进行一些远程操作时，它将显得更加清晰。
&lt;br />[Swift Property Observers,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Swift Property Observers,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Hashable / Hasher</title><link>https://autoptr.top/tutorials/NSHipster/2018-08-13-hashable/</link><pubDate>Mon, 13 Aug 2018 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2018-08-13-hashable/</guid><description>这周我们的主题是 `Hashable` 和相关的新类型 `Hasher`。它们共同组成了 Swift 最受喜爱的两个集合类 `Dictionary` 和 `Set` 的基础功能。
&lt;br />[Hashable / Hasher,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Hashable / Hasher,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Never</title><link>https://autoptr.top/tutorials/NSHipster/2018-07-30-never/</link><pubDate>Mon, 30 Jul 2018 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2018-07-30-never/</guid><description>“Never”是一个约定，表示一件事在过去或未来的任何时段都不会发生。它是时间轴上的一种逻辑上的不可能，在任何方向延展开去都没有可能。&lt;br />[Never,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Never,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>密码规则 / UITextInputPasswordRules</title><link>https://autoptr.top/tutorials/NSHipster/2018-07-23-uitextinputpasswordrules/</link><pubDate>Mon, 23 Jul 2018 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2018-07-23-uitextinputpasswordrules/</guid><description>密码应该完全没有任何意义，除非它是一个 90 年代骇客电影的标题或者一个密室逃脱游戏的答案。&lt;br />[密码规则 / UITextInputPasswordRules,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />密码规则 / UITextInputPasswordRules,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Swift GYB</title><link>https://autoptr.top/tutorials/NSHipster/2018-07-09-swift-gyb/</link><pubDate>Mon, 09 Jul 2018 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2018-07-09-swift-gyb/</guid><description>并不是所有的代码都那么光鲜亮丽，其实很多工作都是通过底层的 boilerplate 来工作的。&lt;br />[Swift GYB,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Swift GYB,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>guard &amp; defer</title><link>https://autoptr.top/tutorials/NSHipster/2015-10-05-guard-and-defer/</link><pubDate>Mon, 05 Oct 2015 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2015-10-05-guard-and-defer/</guid><description>Swift 2.0 带来了两个新的能够简化程序和提高效率的控制流表达形式。前者可以让代码编写更流畅，后者则相反的能够让执行推迟。
&lt;br />[guard &amp; defer,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />guard &amp; defer,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>UIKeyCommand</title><link>https://autoptr.top/tutorials/NSHipster/2015-07-27-uikeycommand/</link><pubDate>Mon, 27 Jul 2015 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2015-07-27-uikeycommand/</guid><description>为了使 iPad 更高效的工作，iOS 9 增加了 *可发现特性*，这是一个叠加层，用于显示一个应用程序内当前可用的键盘命令。在 iPad 上，这个微小的变化使得键盘命令瞬间变得比以往有用多了，并且也使得 `UIKeyCommand` 成为你应用程序的一个必要的附加功能&lt;br />[UIKeyCommand,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />UIKeyCommand,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>CloudKit</title><link>https://autoptr.top/tutorials/NSHipster/2015-06-29-cloudkit/</link><pubDate>Mon, 29 Jun 2015 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2015-06-29-cloudkit/</guid><description>作为 iOS 开发者，如果想自己独立制作应用，有时可能需要写一些后端代码。即使对于能够胜任这项工作的移动开发者而言，这不仅意味着要写代码，跟多的是长期维护。最糟糕的情况可能并不是大家不喜欢你的应用，而是在巨大流量压力下你的服务器宕机了。
幸运的是，现在我们有 CloudKit 了。苹果替我们操心这些事情，你只管让应用变得完美。&lt;br />[CloudKit,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />CloudKit,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>XCPlayground</title><link>https://autoptr.top/tutorials/NSHipster/2015-05-11-xcplayground/</link><pubDate>Mon, 11 May 2015 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2015-05-11-xcplayground/</guid><description>Playgrounds 本质上并不是 Swift 语言的一个特性——相反的，他们是 Swift 对于其所有功能，从其效率和性能，到他的深度和透明度的展现。透过 Playgrounds 的表面，去看看那些工具，他们使得 Playgrounds 成为了一个强大开发过程的一部分：source 和 resource，captured values 和 extended execution，以及整合了的 rich formatting 使得 Playground 成为了一个互动性的教学工具。&lt;br />[XCPlayground,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />XCPlayground,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Swift Documentation</title><link>https://autoptr.top/tutorials/NSHipster/2015-05-05-swift-documentation/</link><pubDate>Tue, 05 May 2015 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2015-05-05-swift-documentation/</guid><description>代码的结构和组织关乎了开发童鞋们的节操问题。明确和一致的代码表示了明确和一贯的思想。请仔细阅读，来了解最近在 Xcode 6 和 Swift 文档的变化&lt;br />[Swift Documentation,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Swift Documentation,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Unmanaged</title><link>https://autoptr.top/tutorials/NSHipster/2015-04-13-unmanaged/</link><pubDate>Mon, 13 Apr 2015 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2015-04-13-unmanaged/</guid><description>通过 Swift 标准库就可以看出，Swift 在安全性和可靠性方面和与 Objective-C 互通性之间方面有着明显的界线。像 `Int`、`String` 和 `Array` 这些类型在使用过程中都会表现出直接且无歧义的行为，但如果什么都不考虑就创建 `UnsafeMutablePointer` 或 `Unmanaged` 等类型的实例，那恐怕就要踩到坑里了。&lt;br />[Unmanaged,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Unmanaged,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Quick Look Debugging</title><link>https://autoptr.top/tutorials/NSHipster/2015-03-30-quick-look-debugging/</link><pubDate>Mon, 30 Mar 2015 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2015-03-30-quick-look-debugging/</guid><description>调试可能会是一个讽刺的实践。我们创建了各种任务来告诉我们的品脱大小的超级计算机代表我们来完成千差万别和不可估量的任务，但为了理解这些相同的程序，我们告诉计算机等等*我们*&lt;br />[Quick Look Debugging,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Quick Look Debugging,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSCalendar Additions</title><link>https://autoptr.top/tutorials/NSHipster/2015-03-16-nscalendar-additions/</link><pubDate>Mon, 16 Mar 2015 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2015-03-16-nscalendar-additions/</guid><description> `NSCalendar` 已经悄悄的构建了大量的方法方便大家获取和操作日期。 从全新的日期组件存取与日期比较方法，到强大的日期插值与枚举方法，有太多的东西被我们忽视了。接下来让我们抽点时间来了解一下吧。&lt;br />[NSCalendar Additions,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSCalendar Additions,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Swift 1.2</title><link>https://autoptr.top/tutorials/NSHipster/2015-02-09-swift-1.2/</link><pubDate>Mon, 09 Feb 2015 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2015-02-09-swift-1.2/</guid><description>Swift 正如其名，速度飞快。随着 Swift 1.2 beta 版本的发布，其开发团队在这次加速俯冲中一次性响应了开发社区的诸多需求，带来了许多激动人心的新特性。本周我们会花一点时间关注这个版本的两个明显提升使用体验的新功能：一个是 `if let` 语句 optional 绑定的巨大变化，另一个是 Objective-C 中的空值标注。&lt;br />[Swift 1.2,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Swift 1.2,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Swift &amp; the Objective-C Runtime</title><link>https://autoptr.top/tutorials/NSHipster/2015-01-26-swift-objc-runtime/</link><pubDate>Mon, 26 Jan 2015 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2015-01-26-swift-objc-runtime/</guid><description>即使一行 Objective-C 代码也不写，每一个 Swift app 都会在 Objective-C runtime 中运行，开启动态任务分发和运行时对象关联的世界。更确切地说，可能在仅使用 Swift 库的时候只运行 Swift runtime。但 Objective-C runtime 与我们共处了如此长的时间，我们也应该将其发挥到极致。 &lt;br>&lt;br>本周的 NShipster 我们将以 Swift 视角来观察这两个运行时中关于关联对象和方法交叉的技术。&lt;br />[Swift &amp; the Objective-C Runtime,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Swift &amp; the Objective-C Runtime,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>JavaScriptCore</title><link>https://autoptr.top/tutorials/NSHipster/2015-01-19-javascriptcore/</link><pubDate>Mon, 19 Jan 2015 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2015-01-19-javascriptcore/</guid><description>OS X Mavericks 和 iOS 7 引入了 JavaScriptCore 库，它把 WebKit 的 JavaScript 引擎用 Objective-C 封装，提供了简单，快速以及安全的方式接入世界上最流行的语言。不管你爱它还是恨它，JavaScript 的普遍存在使得程序员、工具以及融合到 OS X 和 iOS 里这样超快的虚拟机中资源的使用都大幅增长。&lt;br />[JavaScriptCore,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />JavaScriptCore,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>使用qt开发gsoap程序</title><link>https://autoptr.top/cpp/gsoap-with-Qt/</link><pubDate>Fri, 16 Jan 2015 11:32:32 +0800</pubDate><guid>https://autoptr.top/cpp/gsoap-with-Qt/</guid><description>[gsoap,soap,Qt,C++,C,Web Service]&lt;br />如何使用gsoap配合Qt的项目管理开发soap Web Service应用</description></item><item><title>Long Live Cocoa</title><link>https://autoptr.top/tutorials/NSHipster/2015-01-12-long-live-cocoa/</link><pubDate>Mon, 12 Jan 2015 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2015-01-12-long-live-cocoa/</guid><description>Swift 是一个对于我们大多数人而言十分令人兴奋的语言，但是它依旧崭新。Objective-C 的稳定性和 Cocoa 的底蕴也意味着 Swift 确实没有准备好成为巨大改变的驱动力，至少现在没有。Cocoa 的深度和它提供的力量，与 Swift 携手让 Cocoa 变得从未如此相关与有前景。事实上，作为一个 Cocoa 开发者我不认为有比现在更兴奋的时候。&lt;br />[Long Live Cocoa,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Long Live Cocoa,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Reader Submissions - New Year's 2015</title><link>https://autoptr.top/tutorials/NSHipster/2015-01-01-new-years-2015/</link><pubDate>Thu, 01 Jan 2015 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2015-01-01-new-years-2015/</guid><description>对专业的苹果开发者来说，2014 年是一个令人难以置信的一年。随着大量新发展的出现，无论是从苹果还是整个社区，都为读者分享了很多的有趣花絮。&lt;br />[Reader Submissions - New Year's 2015,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Reader Submissions - New Year's 2015,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>The Death of Cocoa</title><link>https://autoptr.top/tutorials/NSHipster/2014-12-29-the-death-of-cocoa/</link><pubDate>Mon, 29 Dec 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-12-29-the-death-of-cocoa/</guid><description>对于我们大多数而言，苹果的简洁、优雅和它软硬件的结合是我们为什么在这个平台开发的原因，尽管如此，即使 Swift 才开始被使用几个月，Cocoa 已经开始失去它原有的光芒了。&lt;br />[The Death of Cocoa,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />The Death of Cocoa,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSUndoManager</title><link>https://autoptr.top/tutorials/NSHipster/2014-12-15-nsundomanager/</link><pubDate>Mon, 15 Dec 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-12-15-nsundomanager/</guid><description>每个人都会犯错误。多亏了 Foundation 库提供了比拼写错误更强大的功能来解救我们。Cocoa 有一套简单强壮的 NSUndoManager API 管理撤销和重做。&lt;br />[NSUndoManager,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSUndoManager,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Apple Pay</title><link>https://autoptr.top/tutorials/NSHipster/2014-12-08-apple-pay/</link><pubDate>Mon, 08 Dec 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-12-08-apple-pay/</guid><description>你要在网上买东西的那一刻你会发现有一种现代化带来的独有的焦虑感。那种感觉不能用语言形容，大概是这样的："我的信用卡去哪了？卡号是多少？我好想买这个啊卡去哪了！"&lt;br />[Apple Pay,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Apple Pay,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>WatchKit</title><link>https://autoptr.top/tutorials/NSHipster/2014-12-01-watchkit/</link><pubDate>Mon, 01 Dec 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-12-01-watchkit/</guid><description>看过WatchKit之后，会有许多东西从UIKit里冒出来。这些主观、固执己见的东西不太好整理成文档。但是对于正在学习的人来说，可能是有趣或是有用的。&lt;br />[WatchKit,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />WatchKit,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>C++ new、delete 与 C malloc、free 的区别</title><link>https://autoptr.top/cpp/new-delete-malloc-free-difference/</link><pubDate>Mon, 24 Nov 2014 19:12:27 +0800</pubDate><guid>https://autoptr.top/cpp/new-delete-malloc-free-difference/</guid><description>[memory,new,delete,malloc,free,C++,C]&lt;br />C++与C语言的内存管理差异，测试用程序源码</description></item><item><title>UIPrintInteractionController</title><link>https://autoptr.top/tutorials/NSHipster/2014-11-17-uiprintinteractioncontroller/</link><pubDate>Mon, 17 Nov 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-11-17-uiprintinteractioncontroller/</guid><description>随着各种不同方式的评论、标记、保存、分享都通过指尖的操作完成，纸质印刷品的价值很容易被人忽视。&lt;br />[UIPrintInteractionController,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />UIPrintInteractionController,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Core Location in iOS 8</title><link>https://autoptr.top/tutorials/NSHipster/2014-11-10-core-location-in-ios-8/</link><pubDate>Mon, 10 Nov 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-11-10-core-location-in-ios-8/</guid><description>自从 iPhone 存在以来，位置服务就一直处于非常重要的位置。iOS 8 给 Core Location 带来了三个主要更新：更分化的权限，室内定位以及访问监控。&lt;br />[Core Location in iOS 8,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Core Location in iOS 8,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Swift System Version Checking</title><link>https://autoptr.top/tutorials/NSHipster/2014-10-06-swift-system-version-checking/</link><pubDate>Mon, 06 Oct 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-10-06-swift-system-version-checking/</guid><description>C 可以使用邪恶的预处理指令。Swift 有预处理指令的安全子集。那么，我们如何检查系统版本的 API 兼容性？&lt;br />[Swift System Version Checking,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Swift System Version Checking,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>UIAlertController</title><link>https://autoptr.top/tutorials/NSHipster/2014-09-30-uialertcontroller/</link><pubDate>Tue, 30 Sep 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-09-30-uialertcontroller/</guid><description>你知道 `UIAlertView`、`UIActionSheet` (以及它们各自的 delegate protocols) 在 iOS 8 中已经被废弃了吗？不骗你哦。&lt;br />[UIAlertController,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />UIAlertController,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Swift Comparison Protocols</title><link>https://autoptr.top/tutorials/NSHipster/2014-09-22-swift-comparison-protocols/</link><pubDate>Mon, 22 Sep 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-09-22-swift-comparison-protocols/</guid><description>Objective-C 让我们对相等性和唯一性的本质慢慢有了带有哲学色彩的思考。为了解救那些不愿意向论文一样的哲理卑身屈膝的开发者，Swift 为此作出了很多改进。&lt;br />[Swift Comparison Protocols,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Swift Comparison Protocols,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>RawOptionSetType</title><link>https://autoptr.top/tutorials/NSHipster/2014-09-08-rawoptionsettype/</link><pubDate>Mon, 08 Sep 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-09-08-rawoptionsettype/</guid><description>Swift 的枚举类型和 Objective-C 中的 `NS_ENUM` 宏相比是一种显著的进步。不幸的是， `NS_OPTIONS` 就没有那么令人愉快了&lt;br />[RawOptionSetType,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />RawOptionSetType,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Swift Default Protocol Implementations</title><link>https://autoptr.top/tutorials/NSHipster/2014-09-02-swift-default-protocol-implementations/</link><pubDate>Tue, 02 Sep 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-09-02-swift-default-protocol-implementations/</guid><description>协议是 Swift 当中泛型实现的基础，然而 Swift 中却缺少内建的提供方法默认实现的机制。不过仍然有一种办法可以解决这个问题，这个办法之前你可能没有留意到。&lt;br />[Swift Default Protocol Implementations,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Swift Default Protocol Implementations,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>WKWebView</title><link>https://autoptr.top/tutorials/NSHipster/2014-08-24-wkwebkit/</link><pubDate>Sun, 24 Aug 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-08-24-wkwebkit/</guid><description>iOS 与 web 之间的关系非常复杂，这种复杂关系甚至可以追溯到几十年前系统建立初期。&lt;br />[WKWebView,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />WKWebView,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Swift Literal Convertibles</title><link>https://autoptr.top/tutorials/NSHipster/2014-08-18-swift-literal-convertible/</link><pubDate>Mon, 18 Aug 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-08-18-swift-literal-convertible/</guid><description>上周我们探讨了如何在 Swift 中重载和创建自定义操作符，这个语言特性十分强大，同时也颇具争议。从各方面来看，本周的文章也恐将两极分化，因为它的内容是 Swift 当中一个无处不在，然而又不被人注意的特性：字面值可转换性。&lt;br />[Swift Literal Convertibles,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Swift Literal Convertibles,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Swift Operators</title><link>https://autoptr.top/tutorials/NSHipster/2014-08-11-swift-operators/</link><pubDate>Mon, 11 Aug 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-08-11-swift-operators/</guid><description>Operators in Swift are among the most interesting and indeed controversial features of this new language.&lt;br />[Swift Operators,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Swift Operators,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Alamofire</title><link>https://autoptr.top/tutorials/NSHipster/2014-08-04-alamofire/</link><pubDate>Mon, 04 Aug 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-08-04-alamofire/</guid><description>尽管我们离使用 Swift 发布 App 还有几个月的时间，已经有若干使用这门新语言的开源项目开始生根发芽了，Alamofire 便是这些项目中的一个。&lt;br />[Alamofire,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Alamofire,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSCalendarUnitYear</title><link>https://autoptr.top/tutorials/NSHipster/2014-07-07-nscalendarunityear/</link><pubDate>Mon, 07 Jul 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-07-07-nscalendarunityear/</guid><description>NSHipster.com 已经走过了两个年头。每周我们都会发表一篇新文章，探讨 Objective-C 或者 Cocoa 当中一些不为人知的话题（除了几周例外）。我们用蛋糕来庆祝一下。&lt;br />[NSCalendarUnitYear,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSCalendarUnitYear,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Clang Diagnostics</title><link>https://autoptr.top/tutorials/NSHipster/2014-06-16-clang-diagnostics/</link><pubDate>Mon, 16 Jun 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-06-16-clang-diagnostics/</guid><description>诊断结合了逻辑与分析来得出一个结论。这是最纯粹的科学和工程学，也是人类最有力的推理。对于我们开发者来说，我们通过代码通知后续代码的生产，创建了一个在过去半个世纪里呈几何级数发展的技术的正反馈循环。尤其对于我们的 Objective-C 开发者来说，最有效的诊断来自 Clang。&lt;br />[Clang Diagnostics,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Clang Diagnostics,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>CocoaPods</title><link>https://autoptr.top/tutorials/NSHipster/2014-05-26-cocoapods/</link><pubDate>Mon, 26 May 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-05-26-cocoapods/</guid><description>只要设计和施工得当，基础设施可以帮助社会成倍的发展。 就Objective-C而言, CocoaPods提供了一个急需的疏导和管理开源软件的工具。&lt;br />[CocoaPods,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />CocoaPods,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Benchmarking</title><link>https://autoptr.top/tutorials/NSHipster/2014-05-19-benchmarking/</link><pubDate>Mon, 19 May 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-05-19-benchmarking/</guid><description>对于完成有意义的工作来说抽象很重要，但却会带来副作用。利用benchmarking，工程师可以揭开他们代码中运行效率的面纱，然后利用获得的信息来优化。&lt;br />[Benchmarking,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Benchmarking,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Configuration Profiles</title><link>https://autoptr.top/tutorials/NSHipster/2014-04-07-configuration-profiles/</link><pubDate>Mon, 07 Apr 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-04-07-configuration-profiles/</guid><description>iOS 作为一个平台的主要缺陷是如何锁定它。 iOS 的 Configuration Profiles 提供了一个有趣的机制来解决这些限制。&lt;br />[Configuration Profiles,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Configuration Profiles,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSURL / NSURLComponents</title><link>https://autoptr.top/tutorials/NSHipster/2014-03-24-nsurl/</link><pubDate>Mon, 24 Mar 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-03-24-nsurl/</guid><description>在所有的一维数据类型中，URI有着至高地位。单独就人类可阅读的字符串这一点来说，它存在并将永远存在于计算机中任何你能够想象到的对位置信息进行编码的数据中。&lt;br />[NSURL / NSURLComponents,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSURL / NSURLComponents,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Empathy</title><link>https://autoptr.top/tutorials/NSHipster/2014-03-17-empathy/</link><pubDate>Mon, 17 Mar 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-03-17-empathy/</guid><description>我们出于本性地想慷慨而有耐心地帮助其他人、解释一些观点。然而在网上，人性似乎没有现实中那么丰满。&lt;br />[Empathy,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Empathy,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>UIReferenceLibraryViewController / DCSDictionaryRef</title><link>https://autoptr.top/tutorials/NSHipster/2014-03-10-dictionary-services/</link><pubDate>Mon, 10 Mar 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-03-10-dictionary-services/</guid><description>虽然字典的地位很大程度上已经被基于网络的“一键释义”功能所替代，但是字典和词汇表在拼写检查、语法检查、自动纠错、自动摘要、语义分析等领域，仍然在幕后扮演着重要角色。&lt;br />[UIReferenceLibraryViewController / DCSDictionaryRef,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />UIReferenceLibraryViewController / DCSDictionaryRef,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSTemporaryDirectory / NSItemReplacementDirectory / mktemp(3)</title><link>https://autoptr.top/tutorials/NSHipster/2014-03-03-nstemporarydirectory/</link><pubDate>Mon, 03 Mar 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-03-03-nstemporarydirectory/</guid><description>外存被用于写入可持续化保存的数据，但当数据生命周期很短时，用Objective-C操作临时文件的资料却很少（可能有，不过这些资料本身也是“临时”的）。&lt;br />[NSTemporaryDirectory / NSItemReplacementDirectory / mktemp(3),macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSTemporaryDirectory / NSItemReplacementDirectory / mktemp(3),macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>namespacing</title><link>https://autoptr.top/tutorials/NSHipster/2014-02-24-namespacing/</link><pubDate>Mon, 24 Feb 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-02-24-namespacing/</guid><description>命名一直是Objective-C的硬伤，和那些优雅的语言相比，Objective-C缺乏标识符容器这点引来了很多不切实际的批评家。&lt;br />[namespacing,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />namespacing,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Method Swizzling</title><link>https://autoptr.top/tutorials/NSHipster/2014-02-17-method-swizzling/</link><pubDate>Mon, 17 Feb 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-02-17-method-swizzling/</guid><description>Method swizzling 用来改变已存在的 selector 映射的方法实现。Method swizzling 通过在运行时修改类的消息分发列表中 selector 与实现的映射使得在运行时修改方法的调用成为可能。&lt;br />[Method Swizzling,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Method Swizzling,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Associated Objects</title><link>https://autoptr.top/tutorials/NSHipster/2014-02-10-associated-objects/</link><pubDate>Mon, 10 Feb 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-02-10-associated-objects/</guid><description>对象关联是Objective-C 2.0在运行时的新特性，这个特性允许你将任何键值在运行时关联到对象上。对象关联是黑暗符咒一样，应该和其他来自objc/runtime.h的函数一样被小心谨慎地对待&lt;br />[Associated Objects,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Associated Objects,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Extended File Attributes</title><link>https://autoptr.top/tutorials/NSHipster/2014-01-20-extended-file-attributes/</link><pubDate>Mon, 20 Jan 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-01-20-extended-file-attributes/</guid><description>在 NSA 披露的间谍活动中，在大众的关注下，元数据的概念在政府监控中担当了意想不到的角色。它是什么？它揭示了我们的什么信息和哪些日常习惯？这些是美国人民都在问的问题，他们需要一个答案。&lt;br />[Extended File Attributes,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Extended File Attributes,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSRange</title><link>https://autoptr.top/tutorials/NSHipster/2014-01-13-nsrange/</link><pubDate>Mon, 13 Jan 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-01-13-nsrange/</guid><description>NSRange 是 Foundation 框架中核心的类型之一。在框架代码中我们经常看到它作为函数的参数或者返回值类型，因此掌握好 NSRange 这个结构会有很多用处。&lt;br />[NSRange,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSRange,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>UIApplicationDelegate launchOptions</title><link>https://autoptr.top/tutorials/NSHipster/2013-12-16-launch-options/</link><pubDate>Mon, 16 Dec 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-12-16-launch-options/</guid><description>AppDelegate 是 iOS 各种功能的集散中心。&lt;br />[UIApplicationDelegate launchOptions,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />UIApplicationDelegate launchOptions,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSNotification &amp; NSNotificationCenter</title><link>https://autoptr.top/tutorials/NSHipster/2013-12-02-nsnotification-and-nsnotificationcenter/</link><pubDate>Mon, 02 Dec 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-12-02-nsnotification-and-nsnotificationcenter/</guid><description>思想的传播，与沟通的方式有着不可避免的联系。媒体对于信息重要性的影响是如此之大，以至于能够改变要传播的思想本身的含义。千真万确，媒体本身就是信息。&lt;br />[NSNotification &amp; NSNotificationCenter,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSNotification &amp; NSNotificationCenter,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSFileManager</title><link>https://autoptr.top/tutorials/NSHipster/2013-11-18-nsfilemanager/</link><pubDate>Mon, 18 Nov 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-11-18-nsfilemanager/</guid><description>[NSFileManager,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />文件系统是一个复杂的主题，它有数十年的历史，一些遗留下的复杂性和一些特别的地方，已经不是一篇文章就可以描述的了。现在大多数的应用除了简单的文件操作之外不会经常与文件系统交互，所以有时候简单了解它的基础就行了。</description></item><item><title>Launch Arguments &amp; Environment Variables</title><link>https://autoptr.top/tutorials/NSHipster/2013-10-21-launch-arguments-and-environment-variables/</link><pubDate>Mon, 21 Oct 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-10-21-launch-arguments-and-environment-variables/</guid><description>有许多选项可以传递给 target 的 scheme，开启一些有用的调试特性。就像快餐店的秘密菜单一样，它们常常是隐蔽而且不为人知的。&lt;br />[Launch Arguments &amp; Environment Variables,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Launch Arguments &amp; Environment Variables,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSError</title><link>https://autoptr.top/tutorials/NSHipster/2013-10-14-nserror/</link><pubDate>Mon, 14 Oct 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-10-14-nserror/</guid><description>NSError 是基础框架中的无名英雄。勇敢的在危险的方法调用时传入传出，通过消息发送者我们就可以从所关联的上下文中找出我们的错误。&lt;br />[NSError,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSError,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Key-Value Observing</title><link>https://autoptr.top/tutorials/NSHipster/2013-10-07-key-value-observing/</link><pubDate>Mon, 07 Oct 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-10-07-key-value-observing/</guid><description>问了几次研究 NSBlock 的人员：Key-Value Observing 在 Cocoa 框架里有着最不好用的 API。它很难对付，啰嗦，令人迷惑。最糟糕的是，它的 API 掩盖了 framework 中很引人注目的特性。&lt;br />[Key-Value Observing,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Key-Value Observing,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>AFNetworking 2.0</title><link>https://autoptr.top/tutorials/NSHipster/2013-09-16-afnetworking-2/</link><pubDate>Mon, 16 Sep 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-09-16-afnetworking-2/</guid><description>AFNetworking 是 iOS 和 OS X 开发中最广泛使用的开源项目之一。它十分流行，但你有没有听说过它的新版呢？&lt;br />[AFNetworking 2.0,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />AFNetworking 2.0,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Equality</title><link>https://autoptr.top/tutorials/NSHipster/2013-08-26-equality/</link><pubDate>Mon, 26 Aug 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-08-26-equality/</guid><description>在哲学和数学领域，相等的概念一直以来都是人们所争论和探寻的焦点，其所蕴含的深层含义更是延伸到道德，社会正义以及公共政策等诸多层面。对于程序员来说，在我们所建模的问题领域当中，协调好“相等”概念在逻辑上和实际意义上的理解，是一个很重要的任务。&lt;br />[Equality,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Equality,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSHashTable &amp; NSMapTable</title><link>https://autoptr.top/tutorials/NSHipster/2013-08-19-nshashtable-and-nsmaptable/</link><pubDate>Mon, 19 Aug 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-08-19-nshashtable-and-nsmaptable/</guid><description>NSSet 和 NSDictionary，连同 NSArray 是 Foundation 框架中最常用的几个集合类型。和其它标准库不同的是，它们的实现细节没有对开发者公开，使得开发者只能编写简单的代码，相信框架（在合理的程度上）是高效的。&lt;br />[NSHashTable &amp; NSMapTable,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSHashTable &amp; NSMapTable,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>rand(3) / random(3) / arc4random(3) / et al.</title><link>https://autoptr.top/tutorials/NSHipster/2013-08-12-random/</link><pubDate>Mon, 12 Aug 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-08-12-random/</guid><description>所谓的随机性只是潜在的因果关系。当然，应用程序开发人员可以不关心哲学，他们关心的是代码。因此，我们本周的目标：清理所有长期以来在 Objective-C 中与随机有关的问题和误解&lt;br />[rand(3) / random(3) / arc4random(3) / et al.,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />rand(3) / random(3) / arc4random(3) / et al.,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Documentation</title><link>https://autoptr.top/tutorials/NSHipster/2013-08-05-documentation/</link><pubDate>Mon, 05 Aug 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-08-05-documentation/</guid><description>Cocoa 开发者间流传着一句格言，Objective-C 的冗长使得其代码就是有效的自我说明。有了 longMethodNamesWithNamedParameters: 以及参数的显式类型，Objective-C 的方法不会给人留下太多的想象空间。&lt;br />[Documentation,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Documentation,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>UIMenuController</title><link>https://autoptr.top/tutorials/NSHipster/2013-07-22-uimenucontroller/</link><pubDate>Mon, 22 Jul 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-07-22-uimenucontroller/</guid><description>移动可用性在当今是一个十分引入注目的领域，特别是考虑到在过去短短的十年时间中它所经历的巨大变革。曾经只有科技精英才能把玩的复杂技术，如今已经飞入寻常百姓家，成为了大部分人使用计算设备的主要形式。&lt;br />[UIMenuController,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />UIMenuController,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSPredicate</title><link>https://autoptr.top/tutorials/NSHipster/2013-07-15-nspredicate/</link><pubDate>Mon, 15 Jul 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-07-15-nspredicate/</guid><description>[NSPredicate,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSPredicate,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSExpression</title><link>https://autoptr.top/tutorials/NSHipster/2013-07-08-nsexpression/</link><pubDate>Mon, 08 Jul 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-07-08-nsexpression/</guid><description>[NSExpression,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSExpression,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSFastEnumeration / NSEnumerator</title><link>https://autoptr.top/tutorials/NSHipster/2013-07-01-enumerators/</link><pubDate>Mon, 01 Jul 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-07-01-enumerators/</guid><description>遍历体现了计算能力的有趣之处。封装只执行一次的逻辑是一回事，把这个封装好的逻辑应用到集合当中的所有元素完全是另一回事了——这也正是计算机程序强大功能的一个体现。&lt;br />[NSFastEnumeration / NSEnumerator,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSFastEnumeration / NSEnumerator,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSUUID / CFUUIDRef / UIDevice -uniqueIdentifier / -identifierForVendor</title><link>https://autoptr.top/tutorials/NSHipster/2013-06-24-uuid-udid-unique-identifier/</link><pubDate>Mon, 24 Jun 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-06-24-uuid-udid-unique-identifier/</guid><description>直到最近之前，应用程序，甚至是跨应用程序启动的时候，获得设备的唯一标识一直都是小菜一碟，简单的请求 UIDevice -uniqueIdentifier 就完事了。&lt;br />[NSUUID / CFUUIDRef / UIDevice -uniqueIdentifier / -identifierForVendor,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSUUID / CFUUIDRef / UIDevice -uniqueIdentifier / -identifierForVendor,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>对象下标索引</title><link>https://autoptr.top/tutorials/NSHipster/2013-06-17-object-subscripting/</link><pubDate>Mon, 17 Jun 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-06-17-object-subscripting/</guid><description>[对象下标索引,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />对象下标索引,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSDataDetector</title><link>https://autoptr.top/tutorials/NSHipster/2013-06-02-nsdatadetector/</link><pubDate>Sun, 02 Jun 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-06-02-nsdatadetector/</guid><description>当人类在他们所有的日常交往中都使用 RDF 后，人工智能的一大任务就是要去搞清楚到底我们都在谈论什么。幸运的是，对于 Cocoa 开发者来说，我们有 NSDataDetector。&lt;br />[NSDataDetector,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSDataDetector,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Core Data Libraries &amp; Utilities</title><link>https://autoptr.top/tutorials/NSHipster/2013-05-20-core-data-libraries-and-utilities/</link><pubDate>Mon, 20 May 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-05-20-core-data-libraries-and-utilities/</guid><description>上周，我们感觉Core Data有些难，所以为了NSHipster的这个问题，我们将奉上关于使用Core Data的最好开源库的引导。仔细阅读，看看你如何充分利用这次Core Data体验。&lt;br />[Core Data Libraries &amp; Utilities,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Core Data Libraries &amp; Utilities,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSCoding / NSKeyedArchiver</title><link>https://autoptr.top/tutorials/NSHipster/2013-05-13-nscoding/</link><pubDate>Mon, 13 May 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-05-13-nscoding/</guid><description>在构建应用程序时，一个重要的架构决策问题是在每次启动之间如何持久化数据。问题是如何精准的重现最后一次关闭应用前的状态；如何描述对象图以使下次完美地重新构建。&lt;br />[NSCoding / NSKeyedArchiver,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSCoding / NSKeyedArchiver,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>MKLocalSearch</title><link>https://autoptr.top/tutorials/NSHipster/2013-04-29-mklocalsearch/</link><pubDate>Mon, 29 Apr 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-04-29-mklocalsearch/</guid><description>在喧闹纷繁的事态下，你可能完全没有发现 iOS 6.1 中的 MapKit 增加了什么。&lt;br />[MKLocalSearch,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />MKLocalSearch,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSSecureCoding</title><link>https://autoptr.top/tutorials/NSHipster/2013-04-15-nssecurecoding/</link><pubDate>Mon, 15 Apr 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-04-15-nssecurecoding/</guid><description>本周的简短文章：你需要了解的关于 NSSecureCoding 的一切。&lt;br />[NSSecureCoding,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSSecureCoding,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>BOOL / bool / Boolean / NSCFBoolean</title><link>https://autoptr.top/tutorials/NSHipster/2013-04-08-bool/</link><pubDate>Mon, 08 Apr 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-04-08-bool/</guid><description>再一次，将我们有逻辑的世界编码为冰冷的电脑计算字节码使得我们不得不用这样或那样的方法处理这些问题。同时，通过阅读我们关于Objective-C中布尔值及其同类的讨论，你会发现，真相实在是比小说还离奇。&lt;br />[BOOL / bool / Boolean / NSCFBoolean,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />BOOL / bool / Boolean / NSCFBoolean,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>iCloud</title><link>https://autoptr.top/tutorials/NSHipster/2013-04-01-icloud/</link><pubDate>Mon, 01 Apr 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-04-01-icloud/</guid><description>可能Apple最出名的地方就是它的持久化记录信息来构建web服务了。从消费者产品级的MobileMe、Ping到开发者工具级别的Provisioning Portal和iTunes Connect，苹果都在便捷性、鲁棒性、扩展性方面确立了新标准&lt;br />[iCloud,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />iCloud,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Search Kit</title><link>https://autoptr.top/tutorials/NSHipster/2013-03-25-search-kit/</link><pubDate>Mon, 25 Mar 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-03-25-search-kit/</guid><description>Search Kit 是一个用人类语言来搜索和建立内容索引的 C 框架。它支持词组或部分单词匹配，包括逻辑操作和通配符，且能通过相关性对结果进行排序。Search Kit 也提供了文档总结功能，在生成有代表性的摘要时很有用。最重要的是：它是线程安全的。&lt;br />[Search Kit,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Search Kit,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>C Storage Classes</title><link>https://autoptr.top/tutorials/NSHipster/2013-03-18-c-storage-classes/</link><pubDate>Mon, 18 Mar 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-03-18-c-storage-classes/</guid><description>在 C 语言中，程序中的变量或函数的作用域和生存周期是由它的存储类确定的。了解这些存储类能帮助我们解密整个 Objective-C 中都常见的术语&lt;br />[C Storage Classes,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />C Storage Classes,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>UIAppearance</title><link>https://autoptr.top/tutorials/NSHipster/2013-03-11-uiappearance/</link><pubDate>Mon, 11 Mar 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-03-11-uiappearance/</guid><description>UIAppearance 允许我们对视图和控件的样式在整个应用范围内进行统一的定义。&lt;br />[UIAppearance,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />UIAppearance,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSAssertionHandler</title><link>https://autoptr.top/tutorials/NSHipster/2013-02-25-nsassertionhandler/</link><pubDate>Mon, 25 Feb 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-02-25-nsassertionhandler/</guid><description>编程结合了人类思考过程中众多学科，从高层次的辩论和语义学——我们用来解释一个系统如何工作的故事——到支撑所有一切的数学和哲学机器。&lt;br />[NSAssertionHandler,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSAssertionHandler,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>ReactiveCocoa</title><link>https://autoptr.top/tutorials/NSHipster/2013-02-18-reactivecocoa/</link><pubDate>Mon, 18 Feb 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-02-18-reactivecocoa/</guid><description>打破了苹果API排他性的盾牌，本期NSHipster将介绍一个为Objective-C勇敢构建新纪元的开源项目：ReactiveCocoa&lt;br />[ReactiveCocoa,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />ReactiveCocoa,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSURLCache</title><link>https://autoptr.top/tutorials/NSHipster/2013-02-11-nsurlcache/</link><pubDate>Mon, 11 Feb 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-02-11-nsurlcache/</guid><description>NSURLCache 为您的应用的 URL 请求提供了内存中以及磁盘上的综合缓存机制。作为基础类库 URL 加载系统的一部分，任何通过 NSURLConnection 加载的请求都将被 NSURLCache 处理。&lt;br />[NSURLCache,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSURLCache,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Type Encodings</title><link>https://autoptr.top/tutorials/NSHipster/2013-02-04-type-encodings/</link><pubDate>Mon, 04 Feb 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-02-04-type-encodings/</guid><description>从数字电台和数学命理到象形文字和流浪汉码，找到看似平常的东西中隐藏的意思真是令人着迷。即使它们中隐藏的信息很少用到或者并不特别有趣，但正是那种寻找的快感激发着我们强烈的好奇心。&lt;br />[Type Encodings,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Type Encodings,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSValue</title><link>https://autoptr.top/tutorials/NSHipster/2013-01-28-nsvalue/</link><pubDate>Mon, 28 Jan 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-01-28-nsvalue/</guid><description>打包就是用一个面向对象的容器来封装标量及其他一些值类型的过程，主要用于将那些值保存到面向对象的集合中——如数组和字典。在基础类库中，以轻量级著称的一个包装便是 NSValue 。&lt;br />[NSValue,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSValue,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSLocalizedString</title><link>https://autoptr.top/tutorials/NSHipster/2013-01-21-nslocalizedstring/</link><pubDate>Mon, 21 Jan 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-01-21-nslocalizedstring/</guid><description>字符串也许是计算中最通用的数据类型。它们以符号的方式传来传去，用来为数值编码，键值关联，代表资源路径，存储语言内容和格式的信息。对面向用户的字符串具有强有力的控制是营造良好的用户体验必不可少的能力。&lt;br />[NSLocalizedString,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSLocalizedString,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>__attribute__</title><link>https://autoptr.top/tutorials/NSHipster/2013-01-14-__attribute__/</link><pubDate>Mon, 14 Jan 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-01-14-__attribute__/</guid><description>本站点文章经常中出现的一个主题是，强调和编译器保持良好关系的重要性。和其他手艺一样，程序员的效率也取决于如何对待他们的工具。照顾好你的工具，它们也会照顾好你。&lt;br />[__attribute__,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />__attribute__,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>nil / Nil / NULL / NSNull</title><link>https://autoptr.top/tutorials/NSHipster/2013-01-07-nil/</link><pubDate>Mon, 07 Jan 2013 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2013-01-07-nil/</guid><description>[nil / Nil / NULL / NSNull,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />nil / Nil / NULL / NSNull,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Reader Submissions - New Year's 2013</title><link>https://autoptr.top/tutorials/NSHipster/2012-12-31-reader-submissions-new-years-2013/</link><pubDate>Mon, 31 Dec 2012 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2012-12-31-reader-submissions-new-years-2013/</guid><description>为了庆祝即将到来的 `year++`，我觉得编译一个你们最喜爱的tips和tricks的列表一定很好玩。读者可以提交他们最喜爱的和Objective-C之间的琐事、各种框架的奥秘、Xcode的隐藏功能之类的你认为很酷的东西。&lt;br />[Reader Submissions - New Year's 2013,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Reader Submissions - New Year's 2013,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>CGGeometry</title><link>https://autoptr.top/tutorials/NSHipster/2012-12-17-cggeometry/</link><pubDate>Mon, 17 Dec 2012 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2012-12-17-cggeometry/</guid><description>除非你是个数学极客或者一个古希腊人，否则几何学应该不是你高中时最喜欢的课程。不过你仍有机会成为那个在课堂上尽职尽责地将所有必要的公式的程序写到你的TI-8X计算器里的那个人。为了保持尽可能少地做数学问题的传统，这里列出了一些不算复杂的 CoreGraphics 函数使你的工作更简单。&lt;br />[CGGeometry,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />CGGeometry,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>instancetype</title><link>https://autoptr.top/tutorials/NSHipster/2012-12-10-instancetype/</link><pubDate>Mon, 10 Dec 2012 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2012-12-10-instancetype/</guid><description>Objective-C 是一门正迅速发展的语言，这种发展速度在别的现有语言中是不曾有过的。从普通到范例转变的发展，真要说清它们之间的差异还得慢慢来。因为我们正在讨论的是底层语言的特性，对于API设计的更深层含义还比较难理解。&lt;br />[instancetype,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />instancetype,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>KVC Collection Operators</title><link>https://autoptr.top/tutorials/NSHipster/2012-12-03-kvc-collection-operators/</link><pubDate>Mon, 03 Dec 2012 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2012-12-03-kvc-collection-operators/</guid><description>Ruby爱好者总爱嘲笑Objective-C臃肿的语法。尽管新的Object Literals语法让我们瘦了几斤，但那些红头发的恶霸们还总是用他们的单行map和花哨的#to_proc符号嘲讽我们。幸运的是，我们有键-值编码这个王牌。&lt;br />[KVC Collection Operators,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />KVC Collection Operators,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSOrderedSet</title><link>https://autoptr.top/tutorials/NSHipster/2012-11-26-nsorderedset/</link><pubDate>Mon, 26 Nov 2012 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2012-11-26-nsorderedset/</guid><description>为什吗`NSOrderedSet`不是继承自`NSSet`的捏？答案可能会让你大吃一惊。&lt;br />[NSOrderedSet,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSOrderedSet,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NS_ENUM &amp; NS_OPTIONS</title><link>https://autoptr.top/tutorials/NSHipster/2012-11-19-ns_enum-ns_options/</link><pubDate>Mon, 19 Nov 2012 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2012-11-19-ns_enum-ns_options/</guid><description>一个专业的Objective-C工程师应该在面向对象和面向过程范式间优雅地切换，同时能够掌握二者的优势。&lt;br />[NS_ENUM &amp; NS_OPTIONS,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NS_ENUM &amp; NS_OPTIONS,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSValueTransformer</title><link>https://autoptr.top/tutorials/NSHipster/2012-11-12-nsvaluetransformer/</link><pubDate>Mon, 12 Nov 2012 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2012-11-12-nsvaluetransformer/</guid><description>在 Foundation 框架的所有类中，NSValueTransformer 也许是从 OS X 平台迁移到 iOS 平台表现最差的那个。但是，经过一些雕琢和使用场景的改变，也许它能在你的应用中发挥重大作用。&lt;br />[NSValueTransformer,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSValueTransformer,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSURLProtocol</title><link>https://autoptr.top/tutorials/NSHipster/2012-11-05-nsurlprotocol/</link><pubDate>Mon, 05 Nov 2012 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2012-11-05-nsurlprotocol/</guid><description>Foundation库的URL加载系统是每个iOS工程师应该熟练掌握的。而在Foundation库中所有与网络相关的类和接口中，NSURLProtocol或许是最黑科技的了。&lt;br />[NSURLProtocol,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSURLProtocol,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>UILocalizedIndexedCollation</title><link>https://autoptr.top/tutorials/NSHipster/2012-10-29-uilocalizedindexedcollation/</link><pubDate>Mon, 29 Oct 2012 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2012-10-29-uilocalizedindexedcollation/</guid><description>当 UITableView 有一百来行时，它就变得有些笨重了。如果用户为了找到他们想要的东西，像玩水果忍者的猫那样疯狂地滑动屏幕时，你可能会想要重新考虑一下用户界面的展现方式。&lt;br />[UILocalizedIndexedCollation,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />UILocalizedIndexedCollation,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSLinguisticTagger</title><link>https://autoptr.top/tutorials/NSHipster/2012-10-22-nslinguistictagger/</link><pubDate>Mon, 22 Oct 2012 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2012-10-22-nslinguistictagger/</guid><description>NSLinguisticTagger在语言学功能上来讲是一把名副其实的瑞士军刀，它可以讲自然语言的字符串标记为单词、确定词性和词根、划分出人名地名和组织名称、告诉你字符串使用的语言和语系。&lt;br />[NSLinguisticTagger,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSLinguisticTagger,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>AddressBookUI</title><link>https://autoptr.top/tutorials/NSHipster/2012-10-15-addressbookui/</link><pubDate>Mon, 15 Oct 2012 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2012-10-15-addressbookui/</guid><description>Address Book UI是用来在用户地址簿展示、选择、编辑和创建联系人的iOS框架。与Message UI框架相似，Address Book UI包含了一些可以用dismissViewControllerAnimated:completion:方法来展示的试图控制器，它通过一些统一的接口提供常用的系统功能。&lt;br />[AddressBookUI,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />AddressBookUI,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>@</title><link>https://autoptr.top/tutorials/NSHipster/2012-10-08-at-compiler-directives/</link><pubDate>Mon, 08 Oct 2012 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2012-10-08-at-compiler-directives/</guid><description>所以如果我们要对这难以捉摸的 Objective-C 品种观“码”，我们要看些什么？方括号，长的荒唐的方法名，和 &lt;tt>@&lt;/tt> 指令。"at" 符号编译器指令对于理解 Objective-C 的格式以及其起源和底层机制非常重要。它是使得 Objective-C 如此强大，具有表现力，并仍能一路编译成底层 C 语言的关键。&lt;br />[@,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />@,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>#pragma</title><link>https://autoptr.top/tutorials/NSHipster/2012-10-01-pragma/</link><pubDate>Mon, 01 Oct 2012 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2012-10-01-pragma/</guid><description>#pragma 声明是彰显Objective-C工艺的标志之一。虽然 #pragma最初的目的是为了使得源代码在不同的编译器下兼容的，但精明的 Xcode 编码器将 #pragma 使用到了极致。&lt;br />[#pragma,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />#pragma,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>UICollectionView</title><link>https://autoptr.top/tutorials/NSHipster/2012-09-24-uicollectionview/</link><pubDate>Mon, 24 Sep 2012 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2012-09-24-uicollectionview/</guid><description>从现在起，UICollectionView凭一己之力改变我们将要设计和开发iOS应用的方式。这并不是说，collection views是未知或模糊的。作为一个NSHipster，不仅仅是知道名不见经传的石头，更多是在它们家喻户晓、售罄一空之前就知道有前途。&lt;br />[UICollectionView,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />UICollectionView,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSCharacterSet</title><link>https://autoptr.top/tutorials/NSHipster/2012-09-17-nscharacterset/</link><pubDate>Mon, 17 Sep 2012 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2012-09-17-nscharacterset/</guid><description>基础类库（Foundation）拥有最好的、功能也最全的string类的实现。但是仅当程序员熟练掌握它时，一个string的实现才是真的好。所以本周，我们将浏览一些基础类库的string生态系统中经常用到且用错的重要组成部分：NSCharacterSet。&lt;br />[NSCharacterSet,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSCharacterSet,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>UIAccessibility</title><link>https://autoptr.top/tutorials/NSHipster/2012-09-10-uiaccessibility/</link><pubDate>Mon, 10 Sep 2012 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2012-09-10-uiaccessibility/</guid><description>辅助功能，如同国际化一样，是一个很难让开发者提起兴致来的话题，但是你也知道，让你对这些东西感兴趣起来就是 NSHipster 的任务。&lt;br />[UIAccessibility,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />UIAccessibility,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSLocale</title><link>https://autoptr.top/tutorials/NSHipster/2012-09-03-nslocale/</link><pubDate>Mon, 03 Sep 2012 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2012-09-03-nslocale/</guid><description>产品的国际化就像牙线：所有人都知道他们应该使用，却可能都不去用。&lt;br />[NSLocale,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSLocale,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>CFBag</title><link>https://autoptr.top/tutorials/NSHipster/2012-08-27-cfbag/</link><pubDate>Mon, 27 Aug 2012 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2012-08-27-cfbag/</guid><description>在计算机科学领域集合数据类型的殿堂中，bag没有数组、集合、联合数组、树、图、优先队列那么占有一席之地。其实bag本身就很晦涩，你可能从没听过这东西。&lt;br />[CFBag,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />CFBag,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSOperation</title><link>https://autoptr.top/tutorials/NSHipster/2012-08-20-nsoperation/</link><pubDate>Mon, 20 Aug 2012 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2012-08-20-nsoperation/</guid><description>我们都知道，让程序瞬间加载并且快速响应的秘诀在于后台异步执行任务。&lt;br />[NSOperation,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSOperation,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSIncrementalStore</title><link>https://autoptr.top/tutorials/NSHipster/2012-08-13-nsincrementalstore/</link><pubDate>Mon, 13 Aug 2012 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2012-08-13-nsincrementalstore/</guid><description>即使这个博客就是专门讲一些晦涩接口，但是`NSIncrementalStore`又刷新了我们对与“晦涩”这个词的理解。这个接口在iOS 5中被发布，相对于其他大家一定会用到的条目，它并没有在更新日志里有更着重的声明。但是讽刺的是，它有可能是iOS 5的API里最重要的一个，它将从现在开始改变我们创建应用的方式。&lt;br />[NSIncrementalStore,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSIncrementalStore,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>CFStringTransform</title><link>https://autoptr.top/tutorials/NSHipster/2012-08-06-cfstringtransform/</link><pubDate>Mon, 06 Aug 2012 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2012-08-06-cfstringtransform/</guid><description>NSString 是基础类库中的佼佼者。 它虽然很强大，但是不提提它的可无缝转换的表兄弟 CFMutableString，或者更特殊的 CFStringTransform，是不负责任的。&lt;br />[CFStringTransform,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />CFStringTransform,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSDateComponents</title><link>https://autoptr.top/tutorials/NSHipster/2012-07-31-nsdatecomponents/</link><pubDate>Tue, 31 Jul 2012 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2012-07-31-nsdatecomponents/</guid><description>[NSDateComponents,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSDateComponents,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSSortDescriptor</title><link>https://autoptr.top/tutorials/NSHipster/2012-07-24-nssortdescriptor/</link><pubDate>Tue, 24 Jul 2012 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2012-07-24-nssortdescriptor/</guid><description>[NSSortDescriptor,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSSortDescriptor,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSCache</title><link>https://autoptr.top/tutorials/NSHipster/2012-07-14-nscache/</link><pubDate>Sat, 14 Jul 2012 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2012-07-14-nscache/</guid><description>[NSCache,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSCache,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSIndexSet</title><link>https://autoptr.top/tutorials/NSHipster/2012-07-07-nsindexset/</link><pubDate>Sat, 07 Jul 2012 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2012-07-07-nsindexset/</guid><description>[NSIndexSet,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSIndexSet,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>C/C++/Qt</title><link>https://autoptr.top/cpp/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://autoptr.top/cpp/</guid><description>[C++,C语言,Qt]&lt;br />C++,C语言和Qt相关的文</description></item><item><title>Tutorials - All credit to github.com/i12bretro</title><link>https://autoptr.top/tutorials/i12bretro/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://autoptr.top/tutorials/i12bretro/</guid><description>[Tutorials,HTML Tutorial Steps,operating systems,virtual machine hypervisors]&lt;br />Quick and to the point IT, Docker and open source software tutorials for all the major operating systems and virtual machine hypervisors.</description></item><item><title>教程集藏</title><link>https://autoptr.top/tutorials/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://autoptr.top/tutorials/</guid><description>[Tutorials,教程]&lt;br />Tutorials,教程</description></item></channel></rss>