<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Swift on AuTopTr</title><link>https://autoptr.top/categories/Swift/</link><description>Recent content in Swift on AuTopTr</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Mon, 03 Jun 2019 08:08:08 +0800</lastBuildDate><atom:link href="https://autoptr.top/categories/Swift/index.xml" rel="self" type="application/rss+xml"/><item><title>Tutorials - All credit to github.com/NSHipster</title><link>https://autoptr.top/tutorials/NSHipster/</link><pubDate>Mon, 03 Jun 2019 08:08:08 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/</guid><description>[Tutorials,教程]&lt;br />Tutorials,教程</description></item><item><title>numericCast(_:)</title><link>https://autoptr.top/tutorials/NSHipster/2018-10-15-numericcast/</link><pubDate>Mon, 15 Oct 2018 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2018-10-15-numericcast/</guid><description>编译通过的代码和正确的代码是不一样的。但有时候需要通过前者来最终获得后者。
&lt;br />[numericCast(_:),macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />numericCast(_:),macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Swift Property Observers</title><link>https://autoptr.top/tutorials/NSHipster/2018-08-20-swift-property-observers/</link><pubDate>Mon, 20 Aug 2018 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2018-08-20-swift-property-observers/</guid><description>现代软件开发已经被视为可能成为鲁布·戈德堡机械装置的典范。然而在进行一些远程操作时，它将显得更加清晰。
&lt;br />[Swift Property Observers,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Swift Property Observers,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Hashable / Hasher</title><link>https://autoptr.top/tutorials/NSHipster/2018-08-13-hashable/</link><pubDate>Mon, 13 Aug 2018 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2018-08-13-hashable/</guid><description>这周我们的主题是 `Hashable` 和相关的新类型 `Hasher`。它们共同组成了 Swift 最受喜爱的两个集合类 `Dictionary` 和 `Set` 的基础功能。
&lt;br />[Hashable / Hasher,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Hashable / Hasher,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Never</title><link>https://autoptr.top/tutorials/NSHipster/2018-07-30-never/</link><pubDate>Mon, 30 Jul 2018 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2018-07-30-never/</guid><description>“Never”是一个约定，表示一件事在过去或未来的任何时段都不会发生。它是时间轴上的一种逻辑上的不可能，在任何方向延展开去都没有可能。&lt;br />[Never,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Never,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Swift GYB</title><link>https://autoptr.top/tutorials/NSHipster/2018-07-09-swift-gyb/</link><pubDate>Mon, 09 Jul 2018 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2018-07-09-swift-gyb/</guid><description>并不是所有的代码都那么光鲜亮丽，其实很多工作都是通过底层的 boilerplate 来工作的。&lt;br />[Swift GYB,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Swift GYB,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>guard &amp; defer</title><link>https://autoptr.top/tutorials/NSHipster/2015-10-05-guard-and-defer/</link><pubDate>Mon, 05 Oct 2015 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2015-10-05-guard-and-defer/</guid><description>Swift 2.0 带来了两个新的能够简化程序和提高效率的控制流表达形式。前者可以让代码编写更流畅，后者则相反的能够让执行推迟。
&lt;br />[guard &amp; defer,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />guard &amp; defer,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>XCPlayground</title><link>https://autoptr.top/tutorials/NSHipster/2015-05-11-xcplayground/</link><pubDate>Mon, 11 May 2015 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2015-05-11-xcplayground/</guid><description>Playgrounds 本质上并不是 Swift 语言的一个特性——相反的，他们是 Swift 对于其所有功能，从其效率和性能，到他的深度和透明度的展现。透过 Playgrounds 的表面，去看看那些工具，他们使得 Playgrounds 成为了一个强大开发过程的一部分：source 和 resource，captured values 和 extended execution，以及整合了的 rich formatting 使得 Playground 成为了一个互动性的教学工具。&lt;br />[XCPlayground,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />XCPlayground,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Swift Documentation</title><link>https://autoptr.top/tutorials/NSHipster/2015-05-05-swift-documentation/</link><pubDate>Tue, 05 May 2015 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2015-05-05-swift-documentation/</guid><description>代码的结构和组织关乎了开发童鞋们的节操问题。明确和一致的代码表示了明确和一贯的思想。请仔细阅读，来了解最近在 Xcode 6 和 Swift 文档的变化&lt;br />[Swift Documentation,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Swift Documentation,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Unmanaged</title><link>https://autoptr.top/tutorials/NSHipster/2015-04-13-unmanaged/</link><pubDate>Mon, 13 Apr 2015 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2015-04-13-unmanaged/</guid><description>通过 Swift 标准库就可以看出，Swift 在安全性和可靠性方面和与 Objective-C 互通性之间方面有着明显的界线。像 `Int`、`String` 和 `Array` 这些类型在使用过程中都会表现出直接且无歧义的行为，但如果什么都不考虑就创建 `UnsafeMutablePointer` 或 `Unmanaged` 等类型的实例，那恐怕就要踩到坑里了。&lt;br />[Unmanaged,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Unmanaged,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Swift 1.2</title><link>https://autoptr.top/tutorials/NSHipster/2015-02-09-swift-1.2/</link><pubDate>Mon, 09 Feb 2015 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2015-02-09-swift-1.2/</guid><description>Swift 正如其名，速度飞快。随着 Swift 1.2 beta 版本的发布，其开发团队在这次加速俯冲中一次性响应了开发社区的诸多需求，带来了许多激动人心的新特性。本周我们会花一点时间关注这个版本的两个明显提升使用体验的新功能：一个是 `if let` 语句 optional 绑定的巨大变化，另一个是 Objective-C 中的空值标注。&lt;br />[Swift 1.2,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Swift 1.2,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Swift &amp; the Objective-C Runtime</title><link>https://autoptr.top/tutorials/NSHipster/2015-01-26-swift-objc-runtime/</link><pubDate>Mon, 26 Jan 2015 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2015-01-26-swift-objc-runtime/</guid><description>即使一行 Objective-C 代码也不写，每一个 Swift app 都会在 Objective-C runtime 中运行，开启动态任务分发和运行时对象关联的世界。更确切地说，可能在仅使用 Swift 库的时候只运行 Swift runtime。但 Objective-C runtime 与我们共处了如此长的时间，我们也应该将其发挥到极致。 &lt;br>&lt;br>本周的 NShipster 我们将以 Swift 视角来观察这两个运行时中关于关联对象和方法交叉的技术。&lt;br />[Swift &amp; the Objective-C Runtime,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Swift &amp; the Objective-C Runtime,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Reader Submissions - New Year's 2015</title><link>https://autoptr.top/tutorials/NSHipster/2015-01-01-new-years-2015/</link><pubDate>Thu, 01 Jan 2015 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2015-01-01-new-years-2015/</guid><description>对专业的苹果开发者来说，2014 年是一个令人难以置信的一年。随着大量新发展的出现，无论是从苹果还是整个社区，都为读者分享了很多的有趣花絮。&lt;br />[Reader Submissions - New Year's 2015,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Reader Submissions - New Year's 2015,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Swift System Version Checking</title><link>https://autoptr.top/tutorials/NSHipster/2014-10-06-swift-system-version-checking/</link><pubDate>Mon, 06 Oct 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-10-06-swift-system-version-checking/</guid><description>C 可以使用邪恶的预处理指令。Swift 有预处理指令的安全子集。那么，我们如何检查系统版本的 API 兼容性？&lt;br />[Swift System Version Checking,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Swift System Version Checking,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Swift Comparison Protocols</title><link>https://autoptr.top/tutorials/NSHipster/2014-09-22-swift-comparison-protocols/</link><pubDate>Mon, 22 Sep 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-09-22-swift-comparison-protocols/</guid><description>Objective-C 让我们对相等性和唯一性的本质慢慢有了带有哲学色彩的思考。为了解救那些不愿意向论文一样的哲理卑身屈膝的开发者，Swift 为此作出了很多改进。&lt;br />[Swift Comparison Protocols,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Swift Comparison Protocols,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>RawOptionSetType</title><link>https://autoptr.top/tutorials/NSHipster/2014-09-08-rawoptionsettype/</link><pubDate>Mon, 08 Sep 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-09-08-rawoptionsettype/</guid><description>Swift 的枚举类型和 Objective-C 中的 `NS_ENUM` 宏相比是一种显著的进步。不幸的是， `NS_OPTIONS` 就没有那么令人愉快了&lt;br />[RawOptionSetType,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />RawOptionSetType,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Swift Default Protocol Implementations</title><link>https://autoptr.top/tutorials/NSHipster/2014-09-02-swift-default-protocol-implementations/</link><pubDate>Tue, 02 Sep 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-09-02-swift-default-protocol-implementations/</guid><description>协议是 Swift 当中泛型实现的基础，然而 Swift 中却缺少内建的提供方法默认实现的机制。不过仍然有一种办法可以解决这个问题，这个办法之前你可能没有留意到。&lt;br />[Swift Default Protocol Implementations,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Swift Default Protocol Implementations,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Swift Literal Convertibles</title><link>https://autoptr.top/tutorials/NSHipster/2014-08-18-swift-literal-convertible/</link><pubDate>Mon, 18 Aug 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-08-18-swift-literal-convertible/</guid><description>上周我们探讨了如何在 Swift 中重载和创建自定义操作符，这个语言特性十分强大，同时也颇具争议。从各方面来看，本周的文章也恐将两极分化，因为它的内容是 Swift 当中一个无处不在，然而又不被人注意的特性：字面值可转换性。&lt;br />[Swift Literal Convertibles,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Swift Literal Convertibles,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>Swift Operators</title><link>https://autoptr.top/tutorials/NSHipster/2014-08-11-swift-operators/</link><pubDate>Mon, 11 Aug 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-08-11-swift-operators/</guid><description>Operators in Swift are among the most interesting and indeed controversial features of this new language.&lt;br />[Swift Operators,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />Swift Operators,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item><item><title>NSCalendarUnitYear</title><link>https://autoptr.top/tutorials/NSHipster/2014-07-07-nscalendarunityear/</link><pubDate>Mon, 07 Jul 2014 09:32:29 +0800</pubDate><guid>https://autoptr.top/tutorials/NSHipster/2014-07-07-nscalendarunityear/</guid><description>NSHipster.com 已经走过了两个年头。每周我们都会发表一篇新文章，探讨 Objective-C 或者 Cocoa 当中一些不为人知的话题（除了几周例外）。我们用蛋糕来庆祝一下。&lt;br />[NSCalendarUnitYear,macOS,C++,Cocoa,Objective-C,Swift,NSHipster]&lt;br />NSCalendarUnitYear,macOS,C++,Cocoa,Objective-C,Swift,NSHipster</description></item></channel></rss>